<?php
/**
 * @file
 *  Display a specified content type with jQuery ability for sleek sliding
 *  For Drupal 7 Version 1
 *  Workflow for submodule :
 * 1. invoke hook vtslide_build_options() for registering the slider type in the slider vertical tabs in the node edit form
 * 2. define a theme via hook_theme with preprocess function for the slider content ( for single slide item ) + wrapper ( wrap all the single slide item ) + slider preview (optional)
 * 3. define a new drupal block that calls for the theme wrapper function previously made
 * 4. in the theme wrapper function that is called from drupal block, call for vtslide_fetch_data($number = NULL, $limit = NULL, $count = NULL, $slider_type = NULL, $status = 1, $direction = NULL, $enabled = TRUE) and pass the result to vtslide_build_content($data = NULL, $theme = NULL) and specify the theme for the single slide item / slider preview.
 * 5. in the single item / slider preview call for vtslide_build_xx to build the variables for the slider single item / slider preview
 * 6. finish up the submodule with adding custom js, css, templates (for the themes that you define before), admin config form, hook menu, hook init etc
 */

/**
 * Implement hook_help().
 *
 * @param $section
 */
function vt_slider_api_help($section) {
  switch ($section) {
    case 'admin/help#vt_slider_api':
      $output = "API modules for all VicTheme Slider type modules";
      return $output;

    case 'admin/modules#description':
      return 'This module will provide new fields for configuring VicTheme Sliders family modules';
  }
}

/**
 * Implement hook_menu().
 */
function vt_slider_api_menu() {
  $items = array();
  $items['admin/config/vt_slider/vt_slider_api'] = array(
    'title' => 'Slider API configuration',
		'description' => 'Configure VicTheme Slider API',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vt_slider_api_admin_settings'),
    'access arguments' => array('administer site configuration'),
		'file' => 'vt_slider_api.admin.inc',
		'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/vt_slider'] = array(
    'title' => 'VicTheme Slider Dashboard',
		'position' => 'right',
		'weight' => -5,
		'page callback' => 'system_admin_menu_block_page',
		'access arguments' => array('administer site configuration'),
		'file' => 'system.admin.inc',
		'file path' => drupal_get_path('module', 'system'),
  );
  return $items;
}

/**
 * API For reading the theme directory
 * $modulename = input the module system name
 **/
function vtslide_read_dir($modulename) {
  $dir = drupal_get_path('module', $modulename) . '/theme/';
  $options = array('key' => 'filename');
  $array = array();
  $files = file_scan_directory($dir, '/.*\.css$/' , $options);
  foreach ($files as $key => $value) $array[$value->name] = $value->name;
  return $array;
}


/**
 * API For loading sub module themes
 * $theme = the theme machine name, usually comes from the selected array of the vtslide_read_dir();
 **/
function vtslide_load_theme($theme, $module) {
  drupal_add_css(drupal_get_path('module', $module) . '/theme/' . $theme . '/' . $theme .'.css');
}

/**
 * API For fetching the sorted nids from database
 * $number = the starting number for sql LIMIT
 * $limit = the ending number for sql LIMIT
 * $count = return the result as count
 * $slider_type = the slider type the function should look for
 * $status = the node status the function should use for sorting
 * $direction = the ordering direction which can be sql ASC or DESC the function should use
 * $enabled = boolean , select enabled or disabled node, this can be modified on the slider panel on node edit
 * $docache = nocache or cache, bypassing the cache by selecting nocache or do cache by set it to cache
 **/
function vtslide_fetch_data($number = NULL, $limit = NULL, $count = NULL, $slider_type = NULL, $status = 1, $direction = NULL, $enabled = 'enabled', $docache = 'cache') {
  // build our cache key
  $key = 'vt_slider-' . $number . '-' . $limit . '-' . $count . '-' . $slider_type . '-' . $status . '-' . $direction . '-' . $enabled;


  // set out nids as drupal static
  if ($count != NULL) {
    $nids[$key] = &drupal_static(__FUNCTION__);
  }

  // when static caches missed
  if (!isset($nids[$key])) {
    // grab cache
    $cache = cache_get($key);

    // try to fetch database cache
    if (is_object($cache) && $docache == 'cache') {
      //cache_clear_all();
      $nids[$key] = $cache->data;
    }

    // when database cache failed do the expensive query
    else {
      // break the function if no slider type specified
      $checktable = vtslide_check_table();
      if (empty($checktable)) return '';
      if (empty($slider_type)) return false;
      if (!is_array($slider_type)) $slider_type = array($slider_type);
      if (empty($direction)) $direction = 'DESC';

      $query = db_select('node', 'n');
      $query->fields('n',array('nid'));

      // join all the required table
      $query->leftjoin('field_data_vtslider_slidertype', 'st', 'n.nid = st.entity_id');
      $query->leftjoin('field_data_vtslider_weight', 'sw', 'n.nid = sw.entity_id');
      $query->leftjoin('field_data_vtslider_enable', 'se', 'n.nid = se.entity_id');

      // default conditions
      $query->condition('st.vtslider_slidertype_value', $slider_type, 'IN');

      if ($enabled == 'enable' || $enabled == 'disable') $query->condition('se.vtslider_enable_value', $enabled, '=');

      // conditional conditions
      if ($status != '2') $query->condition('n.status', $status, '=');

      // new in 1.4 sort based on current language
      if (module_exists('locale') && variable_get('vt_slider_api_language', '') == 'yes') {
        global $language_url;
        $query->condition('n.language', $language_url->language, '=');
      }

      // limiting and ordering
      $query->orderBy('sw.vtslider_weight_value', $direction);
      if (!empty($limit)) $query->range($number, $limit);

      $result = $query->execute()->fetchAll();

      // break if no result found
      if (empty($result)) {
        return FALSE;
      }

      foreach($result as $nid) {
        $nodes[$nid->nid] = $nid->nid;
      }

      if ($count != NULL) {
        $output = count($nodes) - 1;
      }

      if ($count == NULL) {
        $output = node_load_multiple($nodes);
      }

      $nids[$key] = $output;

      // set the database cache for this query
      cache_set($key, $nids[$key], 'cache');
    }
  }

  return $nids[$key];
}


/**
 * API Function for generic build the content / output the data fetched from vtslide_fetch_data to a themed output
 * $data = the data fetched from vtslide_fetch_data
 * $theme = the theme function name that the function should use to format the output
 * $open = which slider item delta should be stated as open
 **/

function vtslide_build_content($data = NULL, $theme = NULL) {
  $output = '';
  $i = 0;
  $count = count($data);
  if (!empty($data) && !empty($theme)) {
    foreach ($data as $key => $value) {
      $i++;
      $value->delta = $i;
      $value->count = $count;
      $output .= theme($theme, array('node' => $value));
    }
  }
  return $output;
}


/**
 * API Function to build fields array
 **/
function vtslide_fields() {
  $fields = array(
    // text field
    'vtslider_preview_title' => array(
      'field_name' => 'vtslider_preview_title',
      'cardinality' => 1,
      'type' => 'text',
    	'module' => 'vt_slider_api',
      'translatable' => 1,
    ),
    'vtslider_preview_body' => array(
      'field_name' => 'vtslider_preview_body',
      'cardinality' => 1,
      'type' => 'text',
    	'module' => 'vt_slider_api',
  	  'translatable' => 1,
    ),
    'vtslider_title' => array(
      'field_name' => 'vtslider_title',
      'cardinality' => 1,
      'type' => 'text',
    	'module' => 'vt_slider_api',
      'translatable' => 1,
    ),

    'vtslider_body' => array(
      'field_name' => 'vtslider_body',
      'cardinality' => 1,
      'type' => 'text_long',
    	'module' => 'vt_slider_api',
      'translatable' => 1,
    ),
    // checkbox
    'vtslider_enable' => array(
      'field_name' => 'vtslider_enable',
      'cardinality' => 1,
      'type' => 'text',
    	'module' => 'vt_slider_api',
      'translatable' => 1,
    ),
    'vtslider_slidertype' => array(
      'field_name' => 'vtslider_slidertype',
      'cardinality' => 1,
      'type' => 'text',
    	'module' => 'vt_slider_api',
      'translatable' => 1,
    ),
      // image field
    'vtslider_image' => array(
      'field_name' => 'vtslider_image',
      'cardinality' => 1,
      'type' => 'image',
    	'module' => 'vt_slider_api',
      'translatable' => 1,
    ),
    'vtslider_image_preview' => array(
      'field_name' => 'vtslider_image_preview',
      'cardinality' => 1,
      'type' => 'image',
    	'module' => 'vt_slider_api',
      'translatable' => 1,
    ),
    // weight field
    'vtslider_weight' => array(
      'field_name' => 'vtslider_weight',
      'cardinality' => 1,
      'type' => 'text',
    	'module' => 'vt_slider_api',
      'translatable' => 1,
    ),
  );
  return $fields;
}

/**
 * Function for building submodule options
 * every submodule that use this api must invoke this hook in order to get listed in the node form for selecting the node
 * as a slider content for that particular submodule
 * $options must have submodule machine name as key
 **/
function vtslide_build_options() {
  $options = array();
  $data = module_invoke_all('vtslide_build_options');
  foreach ($data as $value) {
    $a = explode('##', $value);
    $options[$a[0]] = $a[1];
  }

  if (empty($options)) $options = array('0' => 'No Slider Module');
  return $options;
}
/**
 * Function for loading node edit related js
 * This is useful for loading js to hide the form field that module doesn't use
 * insert with $options[modulename] = path to js;
 **/
function vtslide_build_node_js() {
  $options = array();
  $data = module_invoke_all('vtslide_build_node_js');
  $options = array();
  foreach ($data as $key => $value) {
    $options[] = array('data' => drupal_get_path('module', $key) . $value, 'type' => 'file');
  }
  return $options;

}

/**
 * Implementats hook_vtslide_build_node_js().
 **/
function vt_slider_api_vtslide_build_node_js() {
  return array('vt_slider_api' => '/js/vt_slider_api.js');
}

/**
 * Create the field instances array
 **/
function vtslide_instances() {
  $instances = array(
    // instance of the text field above
    'vtslider_preview_title' => array(
      'field_name'  => 'vtslider_preview_title',
      'label'       => t('Slider preview title'),
	  	'entity_type' => 'node',
      'widget'      => array(
        'type'      => 'text_textfield',
        'weight'		=> 4,
      ),
			'display'			=> array(
				'default'		=> array(
					'label'		=> 'hidden',
					'type'		=> 'hidden',
        ),
      ),
    ),
		'vtslider_preview_body' => array(
      'field_name'  => 'vtslider_preview_body',
      'label'       => t('Slider preview body'),
	  	'entity_type' => 'node',
      'widget'      => array(
        'type'      => 'text_textarea',
        'weight'		=> 5,
      ),
			'display'			=> array(
				'default'		=> array(
					'label'		=> 'hidden',
					'type'		=> 'hidden',
          ),
      ),
    ),
    // instance of the text field above
    'vtslider_title' => array(
      'field_name'  => 'vtslider_title',
      'label'       => t('Slider title text'),
	  	'entity_type' => 'node',
      'widget'      => array(
        'type'      => 'text_textfield',
        'weight'		=> 2,
      ),
			'display'			=> array(
				'default'		=> array(
					'label'		=> 'hidden',
					'type'		=> 'hidden',
        ),
      ),
    ),
    // instance of the text field above
    'vtslider_weight' => array(
      'field_name'  => 'vtslider_weight',
      'label'       => t('Slider item weight ordering'),
	  	'entity_type' => 'node',
      'widget'      => array(
        'type'      => 'text_textfield',
        'weight'		=> 2,
      ),
			'display'			=> array(
				'default'		=> array(
					'label'		=> 'hidden',
					'type'		=> 'hidden',
        ),
      ),
    ),
    // instance of the textarea field above
    'vtslider_body' => array(
      'field_name'  => 'vtslider_body',
      'label'       => t('Slider body text'),
	  	'entity_type' => 'node',
      'widget'      => array(
        'type'      => 'text_textarea',
        'weight'		=> 3,
      ),
			'display'			=> array(
				'default'		=> array(
					'label'		=> 'hidden',
					'type'		=> 'hidden',
        ),
      ),
    ),
    // instance of select
		'vtslider_enable' => array(
      'field_name'  => 'vtslider_enable',
      'label'       => t('Use this node as a slider content?'),
	  	'entity_type' => 'node',
      'widget'      => array(
        'type'      => 'options_select',
        'weight'		=> 0,
      ),
			'display'			=> array(
				'default'		=> array(
					'label'		=> 'hidden',
					'type'		=> 'hidden',
        ),
      ),
    ),
    // instance of the image field above
    'vtslider_image' => array(
      'field_name' => 'vtslider_image',
      'label' => t('Slider image'),
      'cardinality' => 1,
      'type' => 'image_image',
	  	'entity_type' => 'node',
      'settings' => array(
				'file_directory' => 'field/image/slider',
				'file_extensions' => 'png gif jpg jpeg',
				'max_filesize' => '',
				'max_resolution' => '',
				'min_resolution' => '',
				'alt_field' => TRUE,
				'title_field' => '',
      ),
      'widget' => array(
        'settings' => array(
          'preview_image_style' => 'thumbnail',
          'progress_indicator' => 'throbber',
        ),
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
          'settings' => array('image_style' => '', 'image_link' => ''),
          'weight' => -1,
        ),
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'hidden',
          'settings' => array('image_style' => '', 'image_link' => ''),
          'weight' => -1,
        ),
      ),
    ),
    // instance of the image field above
    'vtslider_image_preview' => array(
      'field_name' => 'vtslider_image_preview',
      'label' => t('Slider preview image'),
      'cardinality' => 1,
      'type' => 'image_image',
	  	'entity_type' => 'node',
      'settings' => array(
				'file_directory' => 'field/image/slider',
				'file_extensions' => 'png gif jpg jpeg',
				'max_filesize' => '',
				'max_resolution' => '',
				'min_resolution' => '',
				'alt_field' => TRUE,
				'title_field' => '',
      ),
      'widget' => array(
        'settings' => array(
          'preview_image_style' => 'thumbnail',
          'progress_indicator' => 'throbber',
        ),
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
          'settings' => array('image_style' => '', 'image_link' => ''),
          'weight' => -1,
        ),
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'hidden',
          'settings' => array('image_style' => '', 'image_link' => ''),
          'weight' => -1,
        ),
      ),
    ),
    // instance of select box
		'vtslider_slidertype' => array(
      'field_name'  => 'vtslider_slidertype',
      'label'       => t('Use which slider?'),
	  	'entity_type' => 'node',
      'widget'      => array(
        'type'      => 'options_select',
        'weight'		=> 1,
      ),
			'display'			=> array(
				'default'		=> array(
					'label'		=> 'hidden',
					'type'		=> 'hidden',
        ),
      ),
    ),
  );

  return $instances;
}


/**
 * Alter vertical tabs and put our fields into it
 **/

function vt_slider_api_form_alter(&$form, $form_state , $form_id) {
  $node_types = variable_get('vt_slider_api_source_content_type', '');

  // fix for $node_types is not an array
  if (isset($node_types) && !is_array($node_types)) {
    $node_types = array($node_types);
  }

  if (is_array($node_types)) {

    // fix for translation bug, use key as the key instead of the name
    // which potentially be translated
    foreach ($node_types as $type => $name) {
      // break early if this node is not enabled as slider
      if ($form['#id'] != str_replace('_', '-', $type) . '-node-form') {
        continue;
      }

      // this is to eliminate file field bug as per Drupal 7.10
      $form['#validate'][] = 'vtslider_api_validate';

      // build the vertical wrapper
      $form['vtslider_settings'] = array(
    		'#type' => 'fieldset',
    		'#access' => true,
    		'#title' => t('Slider Settings'),
    		'#collapsible' => true,
    		'#collapsed' => true,
    		'#group' => 'additional_settings',
    		'#attributes' => array('class'=> array('slider-dashboard-form')),
    		'#weight' => 96,
        '#tree' => FALSE,
      );

      // attach additional js if available
      $additionaljs = vtslide_build_node_js();
      foreach ($additionaljs as $value) {
        $form['#attached']['js'][] = $value;
      }

      // loop into each vtslide_instances
      foreach (vtslide_instances() as $key => $value) {
        // Fix missing field key throw error
        if (!isset($form[$key])) {
          continue;
        }
        // move the existing forms to vertical tabs
        $form['vtslider_settings'][$key] = array();
        $form['vtslider_settings'][$key] = $form[$key];
        unset($form[$key]);

        // Add integration with locale module
        if (module_exists('locale')) {
          $form[$key]['#language'] = $form['#node']->language;
        }

        if ($key == 'vtslider_image' || $key == 'vtslider_image_preview') {
          $form['vtslider_settings'][$key]['#parents'] = array(
            'vtslider_settings',
            $key,
          );
        }
      }
      // change the options in the slider type select box, if this can be done from field api is much better that doing it here
      $form['vtslider_settings']['vtslider_slidertype'][$form['#node']->language]['#options'] = vtslide_build_options();


      // set the slider type default value
      if (isset($form['#node']->vtslider_slidertype[$form['#node']->language][0]['value'])) {
        $form['vtslider_settings']['vtslider_slidertype'][$form['#node']->language]['#default_value'] = $form['#node']->vtslider_slidertype[$form['#node']->language][0]['value'];
      }

      // set the disable / enable options
      $form['vtslider_settings']['vtslider_enable'][$form['#node']->language]['#options'] = array(
      	'enable' => t('Enable'),
      	'disable' => t('Disable')
      );

      // set the default value for enable / disable
      if (isset($form['#node']->vtslider_enable[$form['#node']->language][0])) {
        $enable = $form['#node']->vtslider_enable[$form['#node']->language][0];
      }

      $enable_default = 'disable';
      if (!empty($enable['value'])) {
        $enable_default = $enable['value'];
      }

      $form['vtslider_settings']['vtslider_enable'][$form['#node']->language]['#default_value'] = $enable_default;

      // hide the weight form
      $form['vtslider_settings']['vtslider_weight'][$form['#node']->language][0]['value']['#type'] = 'hidden';

      // only add default next largest weight available if there is an empty default value
      if (empty($form['vtslider_settings']['vtslider_weight'][$form['#node']->language][0]['value']['#default_value'])) {
        $form['vtslider_settings']['vtslider_weight'][$form['#node']->language][0]['value']['#default_value'] = vtslide_get_max_weight(NULL);
      }
    }
  }
}

/**
 * Additional validate function
 * to remove the $form_state['values']['vtslider_settings'] wrapper
 *
 * This is required since Drupal 7.10 to tackle the file field bug
 *
 * @param array $form
 * @param array $form_state
 */
function vtslider_api_validate(&$form, &$form_state) {
  // Remove the wrapper in the form_state values for sane field saving
  $pruned = $form_state['values']['vtslider_settings'];
  if (is_array($pruned)) {
   $form_state['values'] += $pruned;
    unset($form_state['values']['vtslider_settings']);
  }
}

/**
 * API function for receiving / storing data to session / posts
 * $session_name = the name of the session that the function should store / retrieve the data
 * Store and return the current selected query for sorting
 **/
function vtslide_lists_sessions($key = NULL, $value = NULL, $session_name = NULL) {
  if (empty($session_name)) $session_name = 'vtslider_session';
  if (isset($_POST[$key]) && !$value) {
    return $_POST[$key];
  } elseif (isset($_GET[$key]) && !$value) {
    return $_GET[$key];
  } else {
    static $storage;
    if ($value) {
      $storage[$key] = $value ;
      $_SESSION[$session_name][$key] = $value ;
    }
    else if (empty($storage[$key]) && isset($_SESSION[$session_name][$key])) {
      $storage[$key] = $_SESSION[$session_name][$key];
    }
    return $storage[$key];
  }
}


/**
 * add the new query from sort form and return it back after processed
 **/
function vtslide_get_current_path() {
  $current_path = implode('', drupal_get_destination());
  // Extracting URL from $current_path
  if(!empty($current_path)) {
    $current_url_full = htmlspecialchars(urldecode($current_path));
    // Removing query string
    $current_url_elements = explode('?', $current_url_full);
    if(is_array($current_url_elements)) {
      return trim($current_url_elements[0]);
    }
    else{
      return trim($current_url_elements);
    }
  }
  else {
    return $_REQUEST['q'];
  }
}

/**
 * API To check if the slider related table exists
 * Return true if exist & return false if doesnt exists
 **/
function vtslide_check_table() {
  $content_type = variable_get('vt_slider_api_source_content_type', ''); // important to fix no table bug
  if (!empty($content_type))  return true;
  if (empty($content_type))   return false;
}

/**
 * API Function to get the maximum / latest weight value
 * $slider_type is for pruning per slider type
 **/
function vtslide_get_max_weight($slider_type = NULL) {
  $checktable = vtslide_check_table();
  if (empty($checktable)) return '';
  $query = db_select('field_data_vtslider_weight', 'w');
  if ($slider_type) $query->leftjoin('field_data_vtslider_slidertype', 'st', 'n.nid = st.entity_id');
  if ($slider_type) $query->condition('st.vtslider_slidertype_value', $slider_type, '=');
  $query->addExpression('MAX(w.vtslider_weight_value)', 'max_weight');
  $results = $query->execute();

  foreach ($results as $value) {
    $output = $value->max_weight + 1;
  }
  return $output;
}



/**
 * API Function to build $variables in submodule themes function
 * This function will build the variables from $node
 **/
function vtslide_build_node_variable(&$variables) {
  $node = $variables['node'];
  $variables['nid'] = $node->nid;
  $variables['uid'] = $node->uid;
  $variables['name'] = $node->name;
  $variables['picture'] = $node->picture;
  $variables['username_link'] = l($node->name, 'user/' . $node->uid);
  $variables['title'] = $node->title;
  if (isset($node->body)) {
    $variables['body'] = $node->body;
  }
  if (empty($variables['path'])) $variables['path'] = 'node/' . $node->nid;
  return $variables;
}

/**
 * API Function to build $variables in submodule themes function
 **/
function vtslide_build_slider_content_variable(&$variables) {
  $node = $variables['node'];
  if (empty($variables['path'])) $variables['path'] = 'node/' . $node->nid;
  // Slider specific variables
  // build slider title
  if (isset($node->vtslider_title[$node->language][0]['value'])) $variables['slider_title'] = $node->vtslider_title[$node->language][0]['value'];
  if (isset($variables['slider_title'])) $variables['slider_title_link'] = l(t($variables['slider_title']), $variables['path']);

  // build slider body
  if (isset($node->vtslider_body[$node->language][0]['value'])) $variables['slider_body'] = $node->vtslider_body[$node->language][0]['value'];
  return $variables;
}

/**
 * API Function to build $variables in submodule themes function
 **/
function vtslide_build_slider_content_preview_variable(&$variables) {
  $node = $variables['node'];
  if (empty($variables['path'])) $variables['path'] = 'node/' . $node->nid;
  // build slider preview
  if (isset($node->vtslider_preview_title[$node->language][0]['value'])) $variables['slider_preview_title'] = $node->vtslider_preview_title[$node->language][0]['value'];
  if (isset($node->vtslider_preview_body[$node->language][0]['value'])) $variables['slider_preview_body'] = $node->vtslider_preview_body[$node->language][0]['value'];
  return $variables;
}

/**
 * API Function to build $variables in submodule themes function
 * The $imagecache_preset should be the submodule imagecache preset
 * The $width should be the submodule preconfigured width
 * The $height should be the submodule preconfigured height
 **/
function vtslide_build_slider_content_image_variable(&$variables, $imagecache_preset, $width, $height) {
  $node = $variables['node'];
  if (empty($variables['path'])) $variables['path'] = 'node/' . $node->nid;

  // build image

  if (isset($node->vtslider_image[$node->language]) && is_numeric($node->vtslider_image[$node->language][0]['fid'])) $file = file_load($node->vtslider_image[$node->language][0]['fid']);
  if (isset($file->uri)) $variables['slider_imagepath'] = $file->uri;
  if (isset($variables['slider_imagepath'])) $variables['slider_imagethemed'] = theme('image_style', array('style_name' => $imagecache_preset, 'path' => $variables['slider_imagepath'], 'alt' => $node->title, 'title' => $node->title, 'width' => $width, 'height' => $height));
  if (isset($variables['slider_imagepath']))	$variables['slider_imagethemed_link'] = l($variables['slider_imagethemed'] , $variables['path'], array('html' => TRUE));
  return $variables;
}

/**
 * API Function to build $variables in submodule themes function
 * The $imagecache_preset should be the submodule imagecache preset
 * The $width should be the submodule preconfigured width
 * The $height should be the submodule preconfigured height
 **/
function vtslide_build_slider_preview_image_variable(&$variables, $imagecache_preset, $width, $height) {
  $node = $variables['node'];
  if (empty($variables['path'])) $variables['path'] = 'node/' . $node->nid;

  if (is_numeric($node->vtslider_image_preview[$node->language][0]['fid'])) $file = file_load($node->vtslider_image_preview[$node->language][0]['fid']);
  if (isset($file->uri)) $variables['slider_imagepath_preview'] = $file->uri;
  if (isset($variables['slider_imagepath_preview'])) $variables['slider_imagethemed_preview'] = theme('image_style', array('style_name' => $imagecache_preset, 'path' => $variables['slider_imagepath_preview'], 'alt' => $node->title, 'title' => $node->title, 'width' => $width, 'height' => $height));
  if (isset($variables['slider_imagepath_preview']))	$variables['slider_imagethemed_preview_link'] = l($variables['slider_imagethemed_preview'] , $variables['path'], array('html' => TRUE));
  return $variables;
}


/**
 * Implements hook_node_delete().
 *
 * @param $node
 *   Node object
 */
function vt_slider_api_node_delete($node) {
  $allowed_types = variable_get('vt_slider_api_source_content_type', array('article'));

  if (!is_array($allowed_types)) {
    $allowed_types = array($allowed_types);
  }

  if (in_array($node->type, $allowed_types)) {
    cache_clear_all('vt_slider', 'cache', TRUE);
  }
}

/**
 * Implements hook_node_insert().
 *
 * @param $node
 *   Node object
 */
function vt_slider_api_node_insert($node) {
  $allowed_types = variable_get('vt_slider_api_source_content_type', array('article'));

  if (!is_array($allowed_types)) {
    $allowed_types = array($allowed_types);
  }

  if (in_array($node->type, $allowed_types)) {
    cache_clear_all('vt_slider', 'cache', TRUE);
  }
}

/**
 * Implements hook_node_update().
 *
 * @param $node
 *   Node object
 */
function vt_slider_api_node_update($node) {
  $allowed_types = variable_get('vt_slider_api_source_content_type', array('article'));

  if (!is_array($allowed_types)) {
    $allowed_types = array($allowed_types);
  }

  if (in_array($node->type, $allowed_types)) {
    cache_clear_all('vt_slider', 'cache', TRUE);
  }
}