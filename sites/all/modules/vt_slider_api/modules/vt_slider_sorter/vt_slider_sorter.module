<?php
/**
 * @file
 *
 * Providing a GUI for reordering slider content
 * Module by Jason Xie
 * jason.xie@victheme.com
 */

/**
 * Implements hook_menu().
 */
function vt_slider_sorter_menu() {
  $items = array();

  $items['admin/config/vt_slider/vt_slider_ordering'] = array(
    'title' => 'Slider Content Ordering',
  	'description' => 'Rearrange the order of appereances of the slider item',
    'page callback' => 'vt_slider_sorter_ordering',
    'access arguments' => array('administer site configuration'),
  	'type' => MENU_NORMAL_ITEM,
  );

return $items;
}

/**
 * Implements hook_theme().
 */
function vt_slider_sorter_theme() {
  return array(
  	'vtslider_sort' => array(
  		'render element' => 'form',
    ),
  	'vtslider_ordering' => array(
  		'render element' => 'form',
    ),
  );
}

/**
 * Menu Callback function
 */
function vt_slider_sorter_ordering() {
	$output = '';
	$sorter_form = drupal_get_form('vtslider_sorter_form');
	$ordering_form = drupal_get_form('vtslider_ordering_form');
	$output .= drupal_render($sorter_form);
	$output .= drupal_render($ordering_form);
return $output;
}

/**
* Form to emulate views exposed form
**/
function vtslider_sorter_form($form_state) {
	$form['vtslider_sort'] = array(
  	'#type' => 'fieldset',
  	'#collapsible' => false,
  	'#collapsed' => false,
  	'#theme' => 'vtslider_sort',
	);
	$form['vtslider_sort']['type'] = array(
  	'#type'  => 'select',
  	'#default_value' => empty($form_state['values']['type']) ? vtslide_lists_sessions('type', NULL, 'vtslide_sorter') : $form_state['values']['type'],
  	'#options' => vtslide_build_options(),
	);
	$form['vtslider_sort']['direction'] = array(
  	'#type'  => 'select',
  	'#default_value' => empty($form_state['values']['direction']) ? vtslide_lists_sessions('direction', NULL, 'vtslide_sorter') : $form_state['values']['direction'],
  	'#options' => array(
  		'ASC' => 'Ascending',
  		'DESC' => 'Descending'
	  ),
	);

	$form['vtslider_sort']['sort'] = array(
  	'#type'  => 'submit',
  	'#name' => 'sort',
  	'#value' => t('Sort'),
	);

	return $form;
}

/**
 * Function to get the weight of slider item
 *
 * @param $entity_id
 */
function vtslide_get_weight($entity_id) {
	$query = db_select('field_data_vtslider_weight', 'w');
	$query->fields('w',array('vtslider_weight_value'))
	      ->condition('w.entity_id', $entity_id, '=');
	$result = $query->execute();

	return $result;
}

/**
 * Submit function
 *
 * @param $form
 * @param $form_state
 */
function vtslider_sorter_form_submit(&$form, &$form_state) {
	$current_path = vtslide_get_current_path();
	$array_skip = array('sort', 'form_build_id', 'form_token', 'form_id');
	foreach ($form_state['values'] as $key => $value) {
		if (!in_array($key, $array_skip)) {
			$query[$key] = $value;
			vtslide_lists_sessions($key, $value, 'vtslide_sorter');  // keep the selection in session
		}
	}
	drupal_goto($current_path, array($query));
}


/**
 * The reordering form
 *
 * @param $form
 * @param $form_state
 */
function vtslider_ordering_form($form_state) {
  // grab the slider type from session
	$slider_type = vtslide_lists_sessions('type', NULL, 'vtslide_sorter');

	// drop to default slider type if session empty
	if (empty($slider_type)) {
		$type = array_keys(vtslide_build_options());
		$slider_type = $type[0];
	}

	// grab the default direction from session
	$direction = vtslide_lists_sessions('direction', NULL, 'vtslide_sorter');

	$form['vtslide_ordering'] = array(
  	'#type' => 'fieldset',
  	'#collapsible' => false,
  	'#collapsed' => false,
  	'#theme' => 'vtslider_ordering',
  	'#tree' => true,
	);


	// grab all slider items
	$data = vtslide_fetch_data($number = NULL, $limit = NULL, $count = NULL, $slider_type, $status = 2, $direction , $enabled = 'enable');

	if (!empty($data)) {
  	foreach ($data as $node) {
  	  $form['vtslide_ordering'][$node->nid]['weight'] = array(
  	    '#type' => 'value',
  	    '#value' => $node->vtslider_weight[$node->language][0]['value'],
  	  );

  		$form['vtslide_ordering'][$node->nid]['vtslider_weight'] = array(
  			'#type' => 'textfield',
  			'#size'=> 5,
  			'#default_value' => $node->vtslider_weight[$node->language][0]['value'],
  		  '#attributes' => array(
  		  	'class' => array(
  		   		'vtweight',
  		  		'vtweight-'. $node->nid,
  		    ),
  		  ),
  		);

  		$form['vtslide_ordering'][$node->nid]['vtslider_enable'] = array(
  			'#type' => 'select',
  			'#default_value' => $node->vtslider_enable[$node->language][0]['value'],
  			'#options' => array(
  				'enable' => t('Enable'),
  				'disable' => t('Disable')
  		  ),
  		);

  		$form['vtslide_ordering'][$node->nid]['vtslider_slidertype'] = array(
  			'#type' => 'select',
  			'#default_value' => $node->vtslider_slidertype[$node->language][0]['value'],
  			'#options' => vtslide_build_options(),
  		);

  		// build the title, switching between slider title or node title
  		$title = $node->title;
  		if (!empty($node->vtslider_title[$node->language][0]['value'])) {
  		  $title= $node->vtslider_title[$node->language][0]['value'];
  		}

  		$form['vtslide_ordering'][$node->nid]['vtslider_title'] = array(
  			'#type' => 'markup',
  			'#value' => $title,
  		);

  		$body = '';
  		if (!empty($node->vtslider_body[$node->language][0]['value'])) {
  		  $body = $node->vtslider_body[$node->language][0]['value'];
  		}
  		$form['vtslide_ordering'][$node->nid]['vtslider_body'] = array(
  			'#type' => 'markup',
  			'#value' => $body,
  		);

  		$form['vtslide_ordering'][$node->nid]['nid'] = array(
  			'#type' => 'markup',
  			'#value' => $node->nid,
  		);

  	}

  	uasort($form['vtslide_ordering'], 'drupal_sort_weight');

  	$form['submit'] = array(
  	'#type'  => 'submit',
  	'#name' => 'process',
  	'#value' => t('Process'),
  	'#submit' => array('vtslide_ordering_form_submit'),
  	);
	}

	return $form;

}

/**
 * Submit function for reordering form
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function vtslide_ordering_form_submit(&$form, &$form_state) {
	// build the arrays
	$limit = '';

	foreach ($form_state['values']['vtslide_ordering'] as $key => $value) {
	  unset($value['weight']);
		$nids[] = check_plain($key);
		$datas[$key] = $value;
		$limit++;
	}

	// clear the slider cache
	cache_clear_all('vt_slider-', 'cache', TRUE);

	// Call the batch process
	vtslide_admin_batch($nids, $limit, $datas);



}

/**
 * Batch processing
 *
 * @param $nids
 * 	 array of nids keyed with nid
 * @param $limit
 *   total items
 * @param $datas
 *   array of nodes datas keyed with nid
 */
function vtslide_admin_batch($nids, $limit, $datas) {
  // Build the batch array
  $batch = array(
  	'finished' => t('Finish updating slider items'),
  	'title' => t('Processing updating slider items'),
  	'init_message' => t('Updating slider items'),
  	'progress_message' => t('Processed @current out of @total.'),
  	'error_message' => t('Updating slider items encountered an error.'),
  );

	$batch['operations'] = array();

	// Loop into each nids
	foreach ($nids as $nid) {
		$nids[0] = $nid;
		$data = array();
		$data[$nid] = $datas[$nid];
		$batch['operations'][] = array('vtslide_batch_process', array($nids, 1, $data));
	}

	// Set the batch
	batch_set($batch);

}

/**
 * Batch processing
 *
 * @param $nids
 * @param $limit
 * @param $datas
 * @param $context
 */
function vtslide_batch_process($nids, $limit, $datas, &$context) {
  if (!isset($context['sandbox']['progress'])) {
  	$context['sandbox']['progress'] = 0;
  	$context['sandbox']['max'] = $limit;
  }

  // Grab the current nid
	$nid = $nids[$context['sandbox']['progress']];
	// Process the node
	$node = node_load($nid, NULL, TRUE);
	// saving the nodes
	foreach ($datas[$nid] as $key => $value) {
		$node->{$key}[$node->language][0]['value'] = $value;
	}

	node_save($node);

	// Store some result for post-processing in the finished callback.
	$context['results'][] = check_plain($node->title);
	$context['sandbox']['progress'] <= $context['sandbox']['max'] ? $context['message'] = t('Now processing %node', array('%node' => $node->title)) : $context['message'] = t('Finish processing');

	// Update our progress information.
	$context['sandbox']['progress']++;

	// Inform the batch engine that we are not finished,
	// and provide an estimation of the completion level we reached.
	if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
	  $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
	}


}

/**
 * Sorting filter theme
 *
 * @param $variables
 */
function theme_vtslider_sort($variables) {
	$form = $variables['form'];

	// header
	$header = array(t('Slider Type'), t('Sort Direction'), '');
	$rows = array();
	$row = array();

	// build the row
	foreach (element_children($form) as $key => $value) {
		$row[] = drupal_render($form[$value]);
	}
	$rows[] = $row;

	// Declaring the variables
	$variables = array(
		'header' => $header,
		'rows' => $rows,
		'attributes' => array(
			'id' => 'slider-sorter'),
	);
  $output = theme('table', $variables);
  $output .= drupal_render_children($form);

  return $output;
}

/**
 * Reordering theme
 *
 * @param $variables
 */
function theme_vtslider_ordering($variables) {
	$form = $variables['form'];

	// Build the headers
  $header = array(
    t('Drag'),
    array('data' => t('Order')),
    t('Enable'),
    t('Type'),
    t('Title'),
    t('Body'),
    t('Edit'),
  );

  // build the rows
  $rows = array();
  foreach (element_children($form) as $key => $value) {
  	// Add tabledrag
	$element = &$form[$value];

    $row = array(
      '',
      drupal_render($element['vtslider_weight']),
      drupal_render($element['vtslider_enable']),
      drupal_render($element['vtslider_slidertype']),
      $element['vtslider_title']['#value'],
      $element['vtslider_body']['#value'],
      l(t('Edit Node'), 'node/' . $element['nid']['#value'] . '/edit'),
    );

    $row = array_merge(array('data' => $row), $element['#attributes']);
    $row['class'][] = 'draggable';
    $rows[] = $row;
  }
  $output = '';
  if (empty($rows)) {
    $rows[] = array(array(
        'data' => t('No Slider item available'),
        'colspan' => '5',
      ));
  }


  drupal_add_tabledrag('slider-overview', 'order', 'sibling', $group = 'vtweight', NULL, NULL, $hidden = TRUE);

  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'slider-overview')));
  $output .= drupal_render_children($form);
  return $output;
}