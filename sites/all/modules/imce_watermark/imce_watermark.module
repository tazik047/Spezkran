<?php

/**
 * @file 
 * 
 * Adding watermark at IMCE image uploading.
 * 
 */

/**
 * Implements hook_permission().
 */
function imce_watermark_permission() {
  return array(
    'imce watermark control' => array(
      'title' => t('Control watermark'), 
      'description' => t('Checkbox appear for controlling watermark at file uploading.'),
    ),
  );  
}

/**
 * Implements hook_menu().
 */
function imce_watermark_menu() {
  $items = array();
  
  $items['admin/config/media/imce/imce'] = array(
    'title' => 'IMCE',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  
  $items['admin/config/media/imce/imce_watermark'] = array(
    'title' => 'IMCE Watermark settings',
    'description' => 'Control how to apply watermark.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imce_watermark_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  
  return $items;
}

/**
 * imce_watermark settings form.
 */
function imce_watermark_settings($form, &$form_state) {
  $form = array();
  $form['#tree'] = TRUE;
  $form_state['profile'] = variable_get('imce_watermark_setting');
  $form_state['imce_watermark_common_setting'] = TRUE;
  imce_watermark_form_imce_profile_form_alter($form, $form_state, 'imce_profile_form');
  
  $form['#validate'][] = 'imce_watermark_settings_validate';
  $form['#submit'][] = 'imce_watermark_settings_submit';
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function imce_watermark_form_imce_profile_form_alter(&$form, &$form_state, $form_id) {
  $profile = $form_state['profile'];
  $common_setting = isset($form_state['imce_watermark_common_setting']) ? $form_state['imce_watermark_common_setting'] : FALSE;
  
  drupal_add_js('
(function ($) {
  $("select#edit-profile-imce-watermark-imagecache-preset").change(function() {
    if ($(this).val() == "-2") {
      if ($("#edit-profile-imce-watermark-custom").is(".collapsed")) {
        Drupal.toggleFieldset("#edit-profile-imce-watermark-custom");
      }
    }
    else {
      if (!$("#edit-profile-imce-watermark-custom").is(".collapsed")) {
        Drupal.toggleFieldset("#edit-profile-imce-watermark-custom");
      }
    }
  }).trigger("change");
})(jQuery);', 
    array('type' => 'inline', 'scope' => 'footer')
  );
  
  $presets = array();
  if (!$common_setting) {
    $presets[0] = ' - ' . t('Common settings') . ' - ';
  }
  $presets[-1] = ' - ' . t('Watermark disabled') . ' - ';
  $presets[-2] = ' - ' . t('Manual script watermark') . ' - ';

  if (module_exists('imagecache_canvasactions')) {
    $presets[t('Image styles')] = array();
    $styles = image_styles();
    foreach ($styles as $name => $style) {
      foreach ($style['effects'] as $effect) {
        if ($effect['name'] == 'canvasactions_file2canvas') {
          $presets[t('Image styles')][$name] = $style['name'];
          break;
        }
      }
    }
    if (empty($presets[t('Image styles')])) {
      unset($presets[t('Image styles')]);
    }
  }

  $selected_preset = isset($profile['imce_watermark_imagecache_preset']) ? $profile['imce_watermark_imagecache_preset'] : ($common_setting ? -2 : 0);
  $form['profile']['imce_watermark_imagecache_preset'] = array(
    '#type' => 'select',
    '#title' => t('Watermark'),
    '#options' => $presets,
    '#required' => TRUE,
    '#description' => t('Set Common settings for using common watermark settings.<br/>
      Set "Watermark disabled" for turning off watermark on IMCE.<br/>
      Select "Manual script watermark" for adding watermark with custom script (warning: it\'s slow).<br/>
      Select image styles names, that have effect "Overlay (watermark)" for using imagecache_canvasactions module.'),
    '#default_value' => $selected_preset,
  );

  $form['profile']['imce_watermark_custom'] = array(
    '#type' => 'fieldset',
    '#title' => t('Manual script watermark settings'),
    '#collapsed' => $selected_preset == -2 ? FALSE : TRUE,
    '#collapsible' => TRUE,
  );
  
  $watermark_url = '';
  if (isset($profile['imce_watermark_custom'])) {
    $profile_custom = $profile['imce_watermark_custom'];
	//print '<pre>';
	print_r($profile_custom);
	
  }
  else {
    $profile_custom = array(
      'watermark_image' => FALSE,
      'imce_watermark_horizontal_position' => 0,
      'imce_watermark_vertical_position' => 0,
      'imce_watermark_horizontal_margin' => 0,
      'imce_watermark_vertical_margin' => 0,
      'imce_watermark_alpha' => 90,
    );    
  }

  $form['previous_file'] = array(
    '#type' => 'value',
    '#value' => 0,
  );
  
  $fid = isset($profile_custom['watermark_image']) ? $profile_custom['watermark_image'] : FALSE;
  print $fid;
  
  if ($fid) {
    /*$file = file_load($fid);
	print_r($file);
	print 'after file';
    if ($file) {*/
      $watermark_url = file_create_url($fid);
	  print $watermark_url;
      $form['profile']['imce_watermark_custom']['watermark_url'] = array(
        '#type' => 'item',
        '#title' => t('Current watermark image'),
        '#markup' => theme('image', array(
          'path' => $watermark_url, 
          'title' => $watermark_url,
        )),
      );
      $form['previous_file']['#value'] = $fid;     
    //}
	/*else{
		$watermark_url = file_create_url('public://watermark.png');
		$form['profile']['imce_watermark_custom']['watermark_url'] = array(
			'#type' => 'item',
			'#title' => t('Current watermark image'),
			'#markup' => theme('image', array(
			  'path' => $watermark_url, 
			  'title' => $watermark_url,
			)),
		  );
		  $form['previous_file']['#value'] = $fid;
	 }  */  
	//die();
  }
  /*else{
	$watermark_url = file_create_url('public://watermark.png');
    $form['profile']['imce_watermark_custom']['watermark_url'] = array(
        '#type' => 'item',
        '#title' => t('Current watermark image'),
        '#markup' => theme('image', array(
          'path' => $watermark_url, 
          'title' => $watermark_url,
        )),
      );
      $form['previous_file']['#value'] = $fid;
  }*/
  
  $form['profile']['imce_watermark_custom']['watermark_image'] = array(
    '#name' => 'files[watermark_image]',
    '#type' => 'file',
    '#title' => t('Watermark image'),
  );
  $form['profile']['imce_watermark_custom']['imce_watermark_horizontal_position'] = array(
    '#type' => 'select',
    '#title' => t('Horizontal position of watermark'),
    '#options' => array(0 => t('left'), 1 => t('middle'), 2 => t('right')),
    '#default_value' => $profile_custom['imce_watermark_horizontal_position'],
  );
  $form['profile']['imce_watermark_custom']['imce_watermark_vertical_position'] = array(
    '#type' => 'select',
    '#title' => t('Vertical position of watermark'),
    '#options' => array(0 => t('top'), 1 => t('center'), 2 => t('bottom')),
    '#default_value' => $profile_custom['imce_watermark_vertical_position'],
  );
  $form['profile']['imce_watermark_custom']['imce_watermark_horizontal_margin'] = array(
    '#type' => 'textfield',
    '#title' => t('Horizontal margin, px'),
    '#default_value' => $profile_custom['imce_watermark_horizontal_margin'],
    '#description' => t('Set minus or plus signed value for moving watermark to left or right from defined position.'),
  );
  $form['profile']['imce_watermark_custom']['imce_watermark_vertical_margin'] = array(
    '#type' => 'textfield',
    '#title' => t('Vertical margin, px'),
    '#default_value' => $profile_custom['imce_watermark_vertical_margin'],
    '#description' => t('Set minus or plus signed value for moving watermark to higher or lower from defined position.'),
  );
  $form['profile']['imce_watermark_custom']['imce_watermark_alpha'] = array(
    '#type' => 'textfield',
    '#title' => t('Alpha level value'),
    '#default_value' => $profile_custom['imce_watermark_alpha'],
  );

  $form['#validate'][] = 'imce_watermark_settings_validate';
  $form['#submit'][] = 'imce_watermark_settings_submit';
  
}

/**
 * Validate watermark settings.
 */
function imce_watermark_settings_validate(&$form, &$form_state) {
  $profile = &$form_state['values']['profile'];
  if ($profile['imce_watermark_imagecache_preset'] == -2) {
    // If required, validate the uploaded picture.
    $validators = array(
      'file_validate_is_image' => array(),
    );

    $prev_fid = isset($form_state['values']['previous_file']) ? $form_state['values']['previous_file'] : 0;
    
    if (!empty($_FILES['files']['name']['watermark_image'])) {
      // Save the file as a temporary file.
      $file = file_save_upload('watermark_image', $validators, file_default_scheme() . '://');
      if ($file === FALSE) {
        form_set_error('watermark_image', t("Failed to upload watermark image."));
      }
      elseif ($file !== NULL) {
        $form_state['values']['watermark_uploaded_image'] = $file;
        $profile['imce_watermark_custom']['watermark_image'] = $file->uri;
        if ($file->uri != $prev_fid) {
          // clearing previous watermark file.
          $prev_file = file_load($prev_fid);
          if ($prev_file) {
            file_delete($prev_file);
          }
        }
      }
    }
    else {
      $profile['imce_watermark_custom']['watermark_image'] = $prev_fid;
    }
  }
}

/**
 * Submit watermark settings.
 */
function imce_watermark_settings_submit($form, &$form_state) {
  $common_setting = isset($form_state['imce_watermark_common_setting']) ? $form_state['imce_watermark_common_setting'] : FALSE;
  
  if ($common_setting) {
    variable_set('imce_watermark_setting', $form_state['values']['profile']);
  }
  else {
    $profile = $form_state['values']['profile'];
    if (($profile['imce_watermark_imagecache_preset'] == -2 ) && isset($form_state['values']['watermark_uploaded_image'])) {
      $form_state['values']['watermark_uploaded_image']->status = FILE_STATUS_PERMANENT;
      file_save($form_state['values']['watermark_uploaded_image']);      
    }
  }
}

/*
 * Implement hook_form_FORM_ID_alter for IMCE file uploading form.
 */
function imce_watermark_form_imce_upload_form_alter(&$form, $form_state, $form_id) {
  $imce =& $form_state['build_info']['args'][0]['imce'];
  
  $preset = isset($imce['imce_watermark_imagecache_preset']) ? $imce['imce_watermark_imagecache_preset'] : 0;
  if (!$preset) {
    // empty or zero mean common settings.
    $imce_watermark_setting = variable_get('imce_watermark_setting');
    $preset = $imce_watermark_setting['imce_watermark_imagecache_preset'];
  }
  else {
    $imce_watermark_setting = $imce['imce_watermark_custom'];
//    $preset = $imce_watermark_setting['imce_watermark_imagecache_preset'];
  }
  
  if ($preset != -1) {
    if (user_access('imce watermark control')) {
      $imce_watermark = isset($_SESSION['$imce_watermark']) ? $_SESSION['$imce_watermark'] : TRUE;
      $form['fset_upload']['upload']['#weight'] = 10;
      $form['fset_upload']['thumbnails']['#weight'] = 5;
      $form['fset_upload']['watermark'] = array(
        '#type' => 'checkbox',
        '#title' => t('Watermark'),
        '#default_value' => $imce_watermark,
        '#weight' => 1,
      );
    }
    else {
      $form['watermark'] = array(
        '#type' => 'value',
        '#value' => TRUE,
      );
    }

    $form['fset_upload']['upload']['#submit'][] = 'imce_watermark_upload_submit';
  }
}

/**
 * Add watermark at IMCE submit.
 */
function imce_watermark_upload_submit($form, &$form_state) {
  $imce =& $form_state['build_info']['args'][0]['imce'];
  
  $preset = isset($imce['imce_watermark_imagecache_preset']) ? $imce['imce_watermark_imagecache_preset'] : 0;
  if (!$preset) {
    $imce_watermark_setting = variable_get('imce_watermark_setting');
    $preset = $imce_watermark_setting['imce_watermark_imagecache_preset'];
    $imce_watermark_setting = $imce_watermark_setting['imce_watermark_custom'];
  }
  else {
    $imce_watermark_setting = $imce['imce_watermark_custom'];
//    $preset = $imce_watermark_setting['imce_watermark_imagecache_preset'];
  }
  
  if (!$form_state['values']['watermark']) {
    return;
  }

  if ($preset == -1) {
    return;
  }

  $uploaded = array();
  
  if ($imce['added'][0]) {
    foreach($imce['added'] as $added) {
      $fid = $added['id'];

      $file = file_load($fid);
      if ($file) {
        $filepath = drupal_realpath($file->uri);
      }
      
      if (!$filepath || !file_exists($filepath)) {
        continue ;
      }
      if (count(file_validate_is_image($file))>0) {
        continue ;
      }

      if ($preset == -2) {
        // Custom script watermarking
		/*watchdog('imce', $imce_watermark_setting);
		die();
        $fid = $imce_watermark_setting['watermark_image'];
        if ($fid) {
          $file = file_load($fid);
          $watermark_filepath = '';
          if ($file) {
            $watermark_filepath = drupal_realpath($file->uri);
          }
        }
        if (!$watermark_filepath || !file_exists($watermark_filepath)) {
          form_set_error(NULL, t('Watermark image not exists. Please refer to site administrator...'));
          return;
        }*/
		

        $watermark = new _imce_watermark();
		$setting = array();
		$setting['font'] = path_to_theme().'/font/opensans-regular.ttf';
		$color = substr(variable_get('ostpc_wm_color'),1);
		$r = $color[0].$color[1];
		$g = $color[2].$color[3];
		$b = $color[4].$color[5];
		$setting['r'] = intval($r, 16);
		$setting['g'] = intval($g, 16);
		$setting['b'] = intval($b, 16);
		$setting['alpha'] = variable_get('ostpc_wm_alpha');
		$setting['h_position'] = variable_get('ostpc_wm_h');
		$setting['v_position'] = variable_get('ostpc_wm_v');
		$result = $watermark->add_watermark($filepath, variable_get('ostpc_wm_text'), $setting);
        if (!$result) {
          form_set_error(NULL, t('Creating watermark failed'));
        }
      }
      else {
        // Watermarking by imagecache actions
        $style = image_style_load($preset);
        if (!$style) {
          form_set_error(NULL, t('Style not exists. Please refer to site administrator...'));
          return;
        }
        image_style_create_derivative($style, $filepath, $filepath);
      }
    }
  }
}

/**
 * Implements hook_form_FORMID_alter().
 * TODO Add button for watermarking on files viewing window.
 *
function imce_watermark_form_imce_fileop_form_alter(&$form, &$form_state, $form_id) {
  $imce = &$form_state['build_info']['args'][0]['imce'];
  if (imce_perm_exists($imce, 'rename')) {
    $form['fset_rename'] = array(
      '#type' => 'fieldset',
      '#title' => t('Rename'),
    ) + imce_rename_form($imce);
    array_unshift($form['#validate'], 'imce_rename_prevalidate'); // Needed to override some validation when renaming folders
    drupal_add_js(drupal_get_path('module', 'imce_rename') .'/imce_rename.js');
    drupal_add_css(drupal_get_path('module', 'imce_rename') .'/imce_rename.css');
  }
}
*/

/*
 * This class taken from: http://www.devshed.com/c/a/PHP/Dynamic-Watermarking-with-PHP/
 * with some modification.
 */
class _imce_watermark {
  
  /**
   * Watermarking image type
   *
   * @var string
   */
  var $image_type = "jpg";
  
  # given two images, return a blended watermarked image

  function add_watermark($img_path, $text, $settings)  {
   $font = $settings['font'];
   $r = $settings['r'];
   $g = $settings['g'];
   $b = $settings['b'];
   $alpha = $settings['alpha'];
   $img = $this->create_image($img_path, TRUE);
   //получаем ширину и высоту исходного изображения
   $width = imagesx($img);
   $height = imagesy($img);
   //угол поворота текста
   $angle =  0;//-rad2deg(atan2((-$height),($width))); 
 
   //добавляем пробелы к строке
   $text = " ".$text." ";
 
   $c = imagecolorallocatealpha($img, $r, $g, $b, $alpha);
   $size = round(($width)/strlen($text));
   $box  = imagettfbbox ( $size, $angle, $font, $text );
   $padding = 5;
   switch ($settings['h_position']) {
      case 0: //left
        $x = $padding;
        break;
      case 1: //center
        $x = round(($width - abs($box[2] - $box[0]))/2);
        break;
      case 2: //right
        $x = $width - abs($box[2] - $box[0]) - $padding;
        break;
    }
    switch ($settings['v_position']) {
      case 0: //top
        $y = abs($box[7] - $box[1]) + $padding;
        break;
      case 1: //middle
        $y = round(($height - abs($box[7] - $box[1]))/2);
        break;
      case 2: //bottom
        $y = $height - (abs($box[7] - $box[1]) + $padding);
        break;
    }
 
   //записываем строку на изображение
   imagettftext($img, $size ,$angle, $x, $y, $c, $font, $text);
   switch ($this->image_type) {
      case 'gif':
        return imagegif($img, $img_path);
      case 'png':
        return imagepng($img, $img_path);
      case 'bmp':
        return image2wbmp($img, $img_path);
      default:
        return imagejpeg($img, $img_path);
    }
    
    return FALSE;
  }
  
    # average two colors given an alpha

  function _get_ave_color($color_a, $color_b, $alpha_level) {
    return round(( ( $color_a * ( 1 - $alpha_level ) ) + ( $color_b * $alpha_level )));
  }

  # END _get_ave_color()
  # return closest pallette-color match for RGB values

  function _get_image_color($im, $r, $g, $b) {
    $c = imagecolorexact($im, $r, $g, $b);
    if ($c != -1)
      return $c;
    $c = imagecolorallocate($im, $r, $g, $b);
    if ($c != -1)
      return $c;
    return imagecolorclosest($im, $r, $g, $b);
  }

  /**
   * This little function allows you to create an image based on the popular image types without worrying about what it is:
   * http://www.php.net/manual/ru/function.imagecreatefromjpeg.php#110547
   * @param type $filepath
   * @return boolean
   */
  function create_image($filepath, $set_image_type = FALSE) {
    $img_type = $this->image_type;
    $type = exif_imagetype($filepath); // [] if you don't have exif you could use getImageSize() 
    $allowedTypes = array(
      1, // [] gif 
      2, // [] jpg 
      3, // [] png 
      6   // [] bmp 
    );
    if (!in_array($type, $allowedTypes)) {
      return false;
    }
    switch ($type) {
      case 1 :
        $img_type = 'gif';
        $im = imageCreateFromGif($filepath);
        break;
      case 2 :
        $img_type = 'jpg';
        $im = imageCreateFromJpeg($filepath);
        break;
      case 3 :
        $img_type = 'png';
        $im = imageCreateFromPng($filepath);
        break;
      case 6 :
        $img_type = 'bmp';
        $im = imageCreateFromBmp($filepath);
        break;
    }
    if ($set_image_type) {
      $this->image_type = $img_type;
    }
    
    return $im;
  }
  
  # END _get_image_color()
}

# END watermark API
