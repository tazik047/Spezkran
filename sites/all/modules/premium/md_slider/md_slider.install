<?php
/**
 * @file - Install file
 */

/**
 * Implement hook_schema()
 */
function md_slider_schema() {
  $schema = array();

  $schema['md_sliders'] = array(
      'description' => 'Slideshows table',
      'fields' =>  array(
          'slid' => array(
              'description' =>  'Primary key for identify a slideshow.',
              'type' => 'serial',
              'unsigned' => TRUE,
              'not null' => TRUE,
          ),
          'title' => array(
              'description' => 'The name of slideshow.',
              'type' => 'text',
              'size' => 'big',
              'not null' => TRUE,
          ),
          'description' => array(
              'description' => 'The description about slideshow is created.',
              'type' => 'varchar',
              'length' => 1000,
          ),
          'machine_name' => array(
              'description' => 'The machine name of slideshow. The uniquied values.',
              'type' => 'varchar',
              'length' => 255,
              'not null' => TRUE,
          ),
          'settings' => array(
              'description' => 'The common settings for slideshow.',
              'type' => 'text',
              'size' => 'big',
              'not null' => TRUE,
          ),
      ),
      'primary key' => array('slid'),
  );

  $schema['md_slides'] = array(
      'description' => 'Slides table',
      'fields' => array(
          'sid' => array(
              'type' => 'serial',
              'unsigned' => TRUE,
              'not null' => TRUE,
              'description' => 'Primary key for identify a slide.',
          ),
          'slid' => array(
              'type' => 'int',
              'unsigned' => TRUE,
              'not null' => TRUE,
              'description' => "Slideshow id contain this slide.",
          ),
          'position' => array(
              'type' => 'int',
              'unsigned' => TRUE,
              'not null' => TRUE,
              'description' => 'Order of slide in slideshow.',
          ),
          'settings' => array(
              'type' => 'text',
              'not null' => TRUE,
              'size' => 'big',
              'description' => "Settings for tab",
          ),
          'layers' => array(
              'type' => 'text',
              'not null' => TRUE,
              'size' => 'big',
              'description' => "Items in this slide",
          ),
      ),
      'foreign keys' => array(
          'md_sliders' => array(
              'table' => 'md_sliders',
              'columns' => array('slid' => 'slid'),
          ),
      ),
      'primary key' => array('sid'),
  );

  return $schema;
}

/**
 * implements hook_field_schema()
 */
function md_slider_field_schema($field) {
  return array(
    "columns" => array(
      "md_slider_id" => array(
        "type" => "int",
        "not null" => TRUE,
      ),
    ),
  );
}

/**
 * Implements hook_install()
 */
function md_slider_install() {
  $module_path = drupal_get_path('module', 'md_slider');
  $default_image = $module_path . '/images/default_bg.jpg';
  $public_folder = variable_get('file_public_path', conf_path() . '/files');
  copy($default_image,  $public_folder . '/md_slider_def_bg.jpg');
}

/**
 * Implements hook_update_N()
 */
function md_slider_update_7200() {
  $sliders = MDSlider::get_all();

  foreach ($sliders as $slider) {
    $slider->machine_name = str_replace('_', '-', $slider->machine_name);
    $slider->save();
  }
}

/**
 * implements update new effect for slides
 */
function md_slider_update_7230() {
  $sliders = MDSlider::get_all();

  foreach ($sliders as $slider) {
    $slides = MDSlide::get_by_slider_id($slider->slid);

    $transition = "fade";
    switch ($slider->settings["animation"]) {
      case "scrollHorz":
      case "scrollLeft":
        $transition = "slide-in-left";
        break;

      case "scrollVert":
      case "scrollRight":
        $transition = "slide-in-right";
        break;

      case "scrollUp":
        $transition = "slide-in-up";
        break;

      case "scrollDown":
        $transition = "slide-in-down";
        break;
    }
    foreach ($slides as $slide) {
      $slide->settings["transitions"] = array($transition);
      $slide->save();
    }

    // Remove slider effect setting
    unset($slider->settings["animation"]);
    $slider->save();
  }
}
